import OpenAI, { ClientOptions } from 'openai';
import { Chat } from './chat/chat.types';
import { Images } from './images/images';
interface TMerlinConfig {
    apiKey: string;
    maxRetries?: number;
    fallbackModels?: string[];
}
interface TClientOptions extends ClientOptions {
    merlinConfig?: TMerlinConfig;
}
export declare class Merlin extends OpenAI {
    merlinConfig: TMerlinConfig;
    /**
     * API Client for interfacing with the OpenAI API.
     *
     * @param {string} [opts.apiKey==process.env['OPENAI_API_KEY'] ?? undefined]
     * @param {string | null} [opts.organization==process.env['OPENAI_ORG_ID'] ?? null]
     * @param {string} [opts.baseURL] - Override the default base URL for the API.
     * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.
     * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
     * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.
     * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.
     * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.
     */
    constructor({ apiKey, organization, ...opts }?: TClientOptions);
    chat: Chat;
    images: Images;
}
export {};
