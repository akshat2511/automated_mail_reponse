"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Merlin = void 0;
const openai_1 = __importDefault(require("openai"));
const Errors = __importStar(require("openai/error"));
const chat_types_1 = require("./chat/chat.types");
const images_1 = require("./images/images");
/**
 * Read an environment variable.
 *
 * Will return undefined if the environment variable doesn't exist or cannot be accessed.
 */
const readEnv = (env) => {
    var _a, _b;
    if (typeof process !== 'undefined') {
        return (_b = (_a = process.env) === null || _a === void 0 ? void 0 : _a[env]) !== null && _b !== void 0 ? _b : undefined;
    }
    return undefined;
};
const isRunningInBrowser = () => {
    return (
    // @ts-ignore
    typeof window !== 'undefined' &&
        // @ts-ignore
        typeof window.document !== 'undefined' &&
        // @ts-ignore
        typeof navigator !== 'undefined');
};
class Merlin extends openai_1.default {
    /**
     * API Client for interfacing with the OpenAI API.
     *
     * @param {string} [opts.apiKey==process.env['OPENAI_API_KEY'] ?? undefined]
     * @param {string | null} [opts.organization==process.env['OPENAI_ORG_ID'] ?? null]
     * @param {string} [opts.baseURL] - Override the default base URL for the API.
     * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.
     * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
     * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.
     * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.
     * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.
     */
    constructor(_a) {
        var _b, _c, _d, _e, _f, _g, _h;
        var { apiKey = readEnv('OPENAI_API_KEY'), organization = (_b = readEnv('OPENAI_ORG_ID')) !== null && _b !== void 0 ? _b : null, ...opts } = _a === void 0 ? {} : _a;
        // if user sends merlinConfig
        const { merlinConfig: merlinConfig, ...baseOpenaiOptions } = opts;
        if (apiKey === undefined && (merlinConfig === null || merlinConfig === void 0 ? void 0 : merlinConfig.apiKey) === undefined) {
            throw new Errors.OpenAIError("The OPENAI_API_KEY environment variable is missing or empty & No Merlin Key was provided; either provide it, or instantiate the OpenAI client with an apiKey option, like new OpenAI({ apiKey: 'My API Key' }).");
        }
        const options = {
            apiKey,
            organization,
            ...baseOpenaiOptions,
            baseURL: (_c = baseOpenaiOptions.baseURL) !== null && _c !== void 0 ? _c : 'https://api.openai.com/v1',
        };
        if (!options.dangerouslyAllowBrowser && isRunningInBrowser()) {
            throw new Errors.OpenAIError("It looks like you're running in a browser-like environment.\n\nThis is disabled by default, as it risks exposing your secret API credentials to attackers.\nIf you understand the risks and have appropriate mitigations in place,\nyou can set the `dangerouslyAllowBrowser` option to `true`, e.g.,\n\nnew OpenAI({ apiKey, dangerouslyAllowBrowser: true });\n\nhttps://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety\n");
        }
        if (!merlinConfig) {
            throw new Errors.OpenAIError('Merlin config is missing');
        }
        super({
            apiKey: apiKey,
            organization: organization,
            baseURL: options.baseURL,
            timeout: (_d = options.timeout) !== null && _d !== void 0 ? _d : 600000 /* 10 minutes */,
            httpAgent: options.httpAgent,
            maxRetries: options.maxRetries,
            fetch: options.fetch,
            defaultHeaders: {
                ...options.defaultHeaders,
                // TODO: Address Potential Problem of sending merlin config to openai
                'x-merlin-key': merlinConfig.apiKey,
                'x-merlin-fallback-models': (_f = (_e = merlinConfig.fallbackModels) === null || _e === void 0 ? void 0 : _e.join(',')) !== null && _f !== void 0 ? _f : '',
                'x-merlin-retries': (_h = (_g = merlinConfig.maxRetries) === null || _g === void 0 ? void 0 : _g.toString()) !== null && _h !== void 0 ? _h : '2',
            },
        });
        this.chat = new chat_types_1.Chat(this);
        this.images = new images_1.Images(this);
        this.merlinConfig = merlinConfig;
        this.apiKey = apiKey !== null && apiKey !== void 0 ? apiKey : '';
        this.organization = organization;
    }
}
exports.Merlin = Merlin;
